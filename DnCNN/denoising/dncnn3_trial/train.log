23-09-02 10:01:47.819 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:01:47.820 : Random seed: 3007
23-09-02 10:01:47.836 : Number of train images: 8,000, iters: 250
23-09-02 10:01:48.262 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:01:48.270 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.077 |  0.076 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.611 |  0.114 |  0.999 |  0.244 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.597 |  0.110 |  0.985 |  0.250 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.034 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.578 |  0.107 |  0.994 |  0.271 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.036 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.520 |  0.107 |  0.993 |  0.283 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.040 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.552 |  0.107 |  0.992 |  0.256 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.590 |  0.104 |  0.993 |  0.269 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 | -0.000 | -0.032 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.506 |  0.145 |  0.956 |  0.229 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.547 |  0.154 |  0.999 |  0.247 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.565 |  0.103 |  0.974 |  0.246 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.587 |  0.107 |  0.997 |  0.266 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.034 |  0.042 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.551 |  0.108 |  0.996 |  0.274 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.033 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.487 |  0.100 |  1.000 |  0.263 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.032 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.521 |  0.113 |  0.963 |  0.244 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.035 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.585 |  0.117 |  0.994 |  0.283 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.513 |  0.110 |  0.996 |  0.275 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.027 |  0.020 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:01:53.489 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.456e-03 
23-09-02 10:02:01.815 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 7.022e-03 
23-09-02 10:02:10.136 : <epoch:  2, iter:     600, lr:1.000e-04> G_loss: 6.308e-03 
23-09-02 10:17:09.416 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:17:09.416 : Random seed: 6316
23-09-02 10:17:09.432 : Number of train images: 8,000, iters: 250
23-09-02 10:17:09.901 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:17:09.909 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.071 |  0.085 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.513 |  0.102 |  0.994 |  0.258 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.038 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.532 |  0.104 |  0.945 |  0.230 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.031 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.589 |  0.131 |  0.999 |  0.272 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.568 |  0.116 |  0.973 |  0.270 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.039 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.556 |  0.106 |  0.998 |  0.259 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.037 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.582 |  0.143 |  0.998 |  0.247 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.520 |  0.110 |  0.974 |  0.251 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.578 |  0.118 |  0.999 |  0.242 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.552 |  0.113 |  0.998 |  0.287 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.510 |  0.102 |  0.989 |  0.259 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.033 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.579 |  0.123 |  0.985 |  0.245 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.543 |  0.103 |  0.974 |  0.252 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.587 |  0.111 |  0.979 |  0.231 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.490 |  0.107 |  0.992 |  0.261 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 |  0.000 | -0.037 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.553 |  0.114 |  0.963 |  0.252 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.001 | -0.028 |  0.026 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:20:12.895 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:20:12.895 : Random seed: 4365
23-09-02 10:20:12.911 : Number of train images: 8,000, iters: 250
23-09-02 10:20:13.379 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:20:13.386 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.071 |  0.074 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.035 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.632 |  0.104 |  0.976 |  0.243 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.034 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.560 |  0.112 |  0.977 |  0.239 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.035 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.552 |  0.115 |  0.977 |  0.266 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.506 |  0.107 |  0.958 |  0.231 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.033 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.507 |  0.108 |  0.995 |  0.275 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.591 |  0.132 |  0.990 |  0.275 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.037 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.502 |  0.110 |  0.984 |  0.257 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.037 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.544 |  0.149 |  0.999 |  0.274 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.573 |  0.111 |  0.993 |  0.263 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.614 |  0.145 |  1.000 |  0.238 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.539 |  0.108 |  0.978 |  0.250 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.039 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.535 |  0.104 |  0.985 |  0.259 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.031 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.477 |  0.106 |  0.994 |  0.257 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.038 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.562 |  0.107 |  0.992 |  0.262 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.031 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.563 |  0.114 |  0.997 |  0.268 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.028 |  0.024 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:20:18.391 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 1.013e-02 
23-09-02 10:20:26.839 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 8.272e-03 
23-09-02 10:21:36.563 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:21:36.563 : Random seed: 9661
23-09-02 10:21:36.583 : Number of train images: 8,000, iters: 250
23-09-02 10:21:37.009 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:21:37.016 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.086 |  0.071 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.489 |  0.110 |  1.000 |  0.249 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.038 |  0.041 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.572 |  0.105 |  0.982 |  0.262 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.577 |  0.103 |  0.998 |  0.290 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.031 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.561 |  0.112 |  0.988 |  0.247 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.538 |  0.106 |  0.998 |  0.284 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.578 |  0.110 |  0.998 |  0.278 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.035 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.550 |  0.127 |  0.997 |  0.274 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.562 |  0.156 |  0.986 |  0.281 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.542 |  0.106 |  0.987 |  0.236 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.544 |  0.119 |  0.999 |  0.270 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.518 |  0.130 |  0.961 |  0.218 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.031 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.538 |  0.106 |  0.975 |  0.252 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.037 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.570 |  0.113 |  0.994 |  0.244 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.605 |  0.120 |  0.995 |  0.243 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.582 |  0.102 |  0.996 |  0.234 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.028 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:21:41.781 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.377e-03 
23-09-02 10:21:50.004 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 6.946e-03 
23-09-02 10:23:02.875 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:23:02.875 : Random seed: 4288
23-09-02 10:23:02.891 : Number of train images: 8,000, iters: 250
23-09-02 10:23:03.329 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:23:03.337 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.002 | -0.068 |  0.093 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.037 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.558 |  0.127 |  0.953 |  0.251 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.509 |  0.116 |  0.992 |  0.247 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.518 |  0.101 |  0.969 |  0.259 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.507 |  0.100 |  0.987 |  0.259 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.560 |  0.118 |  0.970 |  0.265 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.037 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.570 |  0.114 |  0.994 |  0.266 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.034 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.488 |  0.102 |  0.986 |  0.260 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.488 |  0.130 |  0.978 |  0.263 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.037 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.551 |  0.120 |  0.986 |  0.255 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.507 |  0.102 |  0.964 |  0.257 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.038 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.563 |  0.102 |  0.994 |  0.249 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.032 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.561 |  0.115 |  0.984 |  0.252 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.036 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.568 |  0.109 |  0.990 |  0.255 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.035 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.599 |  0.113 |  0.997 |  0.278 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.575 |  0.107 |  0.992 |  0.263 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.029 |  0.025 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:23:08.201 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.342e-03 
23-09-02 10:23:58.162 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:23:58.162 : Random seed: 5654
23-09-02 10:23:58.179 : Number of train images: 8,000, iters: 250
23-09-02 10:23:58.710 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:23:58.717 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.000 | -0.081 |  0.090 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.537 |  0.128 |  0.997 |  0.265 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.562 |  0.106 |  0.991 |  0.264 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.556 |  0.128 |  0.997 |  0.247 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.578 |  0.109 |  0.993 |  0.261 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.565 |  0.109 |  0.972 |  0.276 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.516 |  0.101 |  0.997 |  0.283 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.034 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.536 |  0.110 |  0.992 |  0.285 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.561 |  0.108 |  0.999 |  0.286 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 |  0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.574 |  0.123 |  0.966 |  0.274 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.032 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.515 |  0.110 |  0.996 |  0.276 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.557 |  0.148 |  0.975 |  0.241 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.511 |  0.107 |  0.990 |  0.258 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.549 |  0.106 |  0.979 |  0.262 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.033 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.543 |  0.104 |  0.991 |  0.243 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.531 |  0.119 |  0.991 |  0.251 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.026 |  0.023 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:24:03.524 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.319e-03 
23-09-02 10:24:44.059 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:24:44.059 : Random seed: 7222
23-09-02 10:24:44.075 : Number of train images: 8,000, iters: 250
23-09-02 10:24:44.556 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:24:44.563 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.079 |  0.062 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.618 |  0.112 |  0.974 |  0.249 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.032 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.495 |  0.101 |  0.942 |  0.235 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.036 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.541 |  0.102 |  0.986 |  0.274 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.581 |  0.117 |  0.993 |  0.267 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.039 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.531 |  0.122 |  0.994 |  0.236 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.038 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.564 |  0.146 |  0.983 |  0.245 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.563 |  0.116 |  0.981 |  0.265 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.560 |  0.113 |  1.000 |  0.253 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.031 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.563 |  0.123 |  0.992 |  0.263 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.550 |  0.135 |  0.967 |  0.253 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.549 |  0.109 |  0.980 |  0.277 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.599 |  0.140 |  0.998 |  0.284 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.519 |  0.101 |  0.997 |  0.259 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.572 |  0.119 |  0.952 |  0.240 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.554 |  0.113 |  0.998 |  0.280 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 |  0.001 | -0.030 |  0.030 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:24:49.567 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.256e-03 
23-09-02 10:26:44.285 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:26:44.285 : Random seed: 7998
23-09-02 10:26:44.302 : Number of train images: 8,000, iters: 250
23-09-02 10:26:44.743 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:26:44.750 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.002 | -0.080 |  0.073 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.539 |  0.103 |  0.975 |  0.233 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.037 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.538 |  0.108 |  1.000 |  0.281 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.554 |  0.111 |  0.986 |  0.274 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.032 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.608 |  0.127 |  0.994 |  0.241 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.535 |  0.118 |  0.994 |  0.268 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.492 |  0.110 |  0.965 |  0.272 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.560 |  0.100 |  0.996 |  0.265 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.592 |  0.107 |  0.995 |  0.260 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 |  0.000 | -0.035 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.488 |  0.119 |  0.977 |  0.256 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.539 |  0.104 |  0.979 |  0.241 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.565 |  0.111 |  0.971 |  0.262 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.506 |  0.116 |  0.999 |  0.270 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.032 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.541 |  0.115 |  0.977 |  0.228 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.578 |  0.107 |  0.966 |  0.258 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.040 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.492 |  0.104 |  0.953 |  0.270 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 |  0.000 | -0.025 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:26:49.662 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.001e-03 
23-09-02 10:27:51.925 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:27:51.925 : Random seed: 9574
23-09-02 10:27:51.925 : Number of train images: 12, iters: 1
23-09-02 10:27:52.350 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:27:52.357 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.000 | -0.076 |  0.080 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.034 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.514 |  0.105 |  0.998 |  0.239 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.035 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.574 |  0.114 |  0.982 |  0.283 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.037 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.549 |  0.103 |  0.969 |  0.238 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.035 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.522 |  0.114 |  0.998 |  0.267 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.632 |  0.139 |  1.000 |  0.245 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.553 |  0.101 |  0.997 |  0.232 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.044 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.556 |  0.106 |  0.996 |  0.244 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.605 |  0.114 |  0.997 |  0.257 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 |  0.000 | -0.035 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.524 |  0.129 |  0.969 |  0.248 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.554 |  0.111 |  0.991 |  0.283 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.037 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.505 |  0.116 |  0.998 |  0.253 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.551 |  0.116 |  0.997 |  0.248 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.586 |  0.104 |  0.988 |  0.268 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.569 |  0.107 |  0.987 |  0.267 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 |  0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.544 |  0.109 |  0.992 |  0.267 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.032 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:28:33.794 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:28:33.794 : Random seed: 705
23-09-02 10:28:33.810 : Number of train images: 8,000, iters: 250
23-09-02 10:28:34.236 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:28:34.244 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.084 |  0.079 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.524 |  0.108 |  0.989 |  0.277 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.033 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.561 |  0.109 |  0.992 |  0.255 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.041 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.549 |  0.106 |  0.996 |  0.259 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.592 |  0.105 |  0.993 |  0.252 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.574 |  0.129 |  0.997 |  0.258 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.033 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.530 |  0.119 |  0.976 |  0.234 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.032 |  0.030 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.582 |  0.112 |  0.997 |  0.266 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.033 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.496 |  0.130 |  0.929 |  0.257 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.032 |  0.044 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.540 |  0.102 |  0.992 |  0.270 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.568 |  0.105 |  0.995 |  0.265 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.541 |  0.107 |  0.984 |  0.279 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.035 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.526 |  0.108 |  0.990 |  0.232 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.503 |  0.113 |  0.999 |  0.249 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.034 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.578 |  0.101 |  0.996 |  0.274 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.557 |  0.101 |  0.995 |  0.255 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.024 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:28:39.112 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.875e-03 
23-09-02 10:29:22.813 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:29:22.813 : Random seed: 6811
23-09-02 10:29:22.830 : Number of train images: 8,000, iters: 250
23-09-02 10:29:23.267 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:29:23.274 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.071 |  0.070 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.036 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.532 |  0.120 |  0.984 |  0.276 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.556 |  0.100 |  0.987 |  0.255 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.032 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.521 |  0.102 |  0.991 |  0.258 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.555 |  0.100 |  0.989 |  0.263 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.607 |  0.139 |  0.957 |  0.227 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.548 |  0.113 |  0.987 |  0.276 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.567 |  0.102 |  0.996 |  0.244 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.035 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.584 |  0.101 |  0.988 |  0.267 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.037 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.544 |  0.102 |  0.997 |  0.257 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.548 |  0.103 |  0.985 |  0.256 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.525 |  0.109 |  0.990 |  0.267 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.504 |  0.104 |  0.992 |  0.281 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.038 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.528 |  0.105 |  0.983 |  0.261 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.035 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.521 |  0.105 |  0.967 |  0.273 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.036 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.590 |  0.155 |  1.000 |  0.268 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.024 |  0.026 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:29:28.086 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.256e-03 
23-09-02 10:29:32.477 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 7.427e-03 
23-09-02 10:38:09.952 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:38:09.952 : Random seed: 9084
23-09-02 10:38:09.968 : Number of train images: 8,000, iters: 250
23-09-02 10:38:10.406 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:38:10.414 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.072 |  0.075 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.573 |  0.128 |  0.993 |  0.245 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.545 |  0.112 |  0.991 |  0.298 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.037 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.517 |  0.105 |  0.995 |  0.255 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.037 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.551 |  0.102 |  0.998 |  0.272 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.522 |  0.119 |  0.997 |  0.254 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.033 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.501 |  0.114 |  0.994 |  0.267 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.523 |  0.136 |  0.985 |  0.273 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.037 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.556 |  0.107 |  0.981 |  0.233 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.031 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.562 |  0.116 |  0.992 |  0.230 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.034 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.585 |  0.126 |  1.000 |  0.256 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.036 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.571 |  0.102 |  0.980 |  0.263 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.037 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.590 |  0.130 |  0.988 |  0.241 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.035 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.584 |  0.141 |  0.972 |  0.265 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.534 |  0.114 |  0.995 |  0.260 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 |  0.000 | -0.032 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.580 |  0.111 |  0.955 |  0.256 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.031 |  0.023 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:38:15.138 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.467e-03 
23-09-02 10:42:47.991 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:42:47.992 : Random seed: 5485
23-09-02 10:42:48.008 : Number of train images: 8,000, iters: 250
23-09-02 10:42:48.433 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:42:48.440 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.072 |  0.074 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.581 |  0.118 |  0.987 |  0.262 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.034 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.514 |  0.110 |  0.993 |  0.244 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.031 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.505 |  0.114 |  0.991 |  0.251 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.585 |  0.100 |  0.991 |  0.277 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.036 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.573 |  0.100 |  0.997 |  0.252 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.031 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.505 |  0.119 |  0.976 |  0.268 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 | -0.000 | -0.035 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.570 |  0.104 |  0.984 |  0.247 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.031 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.556 |  0.109 |  0.995 |  0.268 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 |  0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.558 |  0.102 |  0.998 |  0.270 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.563 |  0.117 |  0.994 |  0.271 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.577 |  0.117 |  0.996 |  0.254 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.571 |  0.114 |  0.991 |  0.269 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.030 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.512 |  0.108 |  0.973 |  0.243 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.552 |  0.108 |  0.979 |  0.266 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.037 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.573 |  0.104 |  0.992 |  0.260 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.001 | -0.028 |  0.025 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:42:53.295 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.194e-03 
23-09-02 10:42:57.674 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 6.720e-03 
23-09-02 10:43:27.538 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:43:27.538 : Random seed: 4026
23-09-02 10:43:27.554 : Number of train images: 8,000, iters: 250
23-09-02 10:43:27.976 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:43:27.983 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.000 | -0.075 |  0.064 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.038 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.555 |  0.103 |  0.999 |  0.279 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.540 |  0.101 |  0.993 |  0.260 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.523 |  0.107 |  0.984 |  0.250 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.546 |  0.127 |  0.983 |  0.264 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.575 |  0.111 |  0.982 |  0.236 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.503 |  0.106 |  0.986 |  0.278 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.587 |  0.123 |  1.000 |  0.258 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.563 |  0.143 |  0.997 |  0.262 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.038 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.534 |  0.121 |  0.998 |  0.277 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.033 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.563 |  0.100 |  0.999 |  0.279 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.037 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.549 |  0.110 |  0.986 |  0.271 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.650 |  0.131 |  0.992 |  0.235 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.548 |  0.144 |  0.957 |  0.238 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.037 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.551 |  0.118 |  0.996 |  0.278 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.529 |  0.125 |  0.998 |  0.277 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 |  0.000 | -0.025 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:43:32.691 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.604e-03 
23-09-02 10:44:41.196 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:44:41.196 : Random seed: 9957
23-09-02 10:44:41.213 : Number of train images: 8,000, iters: 250
23-09-02 10:44:41.636 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:44:41.644 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.001 | -0.089 |  0.074 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.558 |  0.109 |  0.996 |  0.285 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.522 |  0.102 |  0.976 |  0.278 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.546 |  0.121 |  0.995 |  0.261 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.038 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.495 |  0.110 |  0.996 |  0.235 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.036 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.498 |  0.106 |  1.000 |  0.279 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.516 |  0.103 |  0.963 |  0.285 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 | -0.000 | -0.036 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.561 |  0.106 |  1.000 |  0.284 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.034 |  0.029 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.500 |  0.104 |  0.952 |  0.281 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.533 |  0.108 |  0.994 |  0.272 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.540 |  0.123 |  0.984 |  0.258 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.036 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.551 |  0.117 |  0.998 |  0.254 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.036 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.554 |  0.142 |  0.998 |  0.257 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.524 |  0.111 |  1.000 |  0.239 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.553 |  0.104 |  0.997 |  0.259 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 |  0.000 | -0.039 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.548 |  0.103 |  0.990 |  0.267 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.025 |  0.027 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:44:46.330 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.858e-03 
23-09-02 10:46:22.501 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:46:22.501 : Random seed: 3218
23-09-02 10:46:22.517 : Number of train images: 8,000, iters: 250
23-09-02 10:46:22.950 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:46:22.957 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.000 | -0.079 |  0.079 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.596 |  0.121 |  0.960 |  0.265 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.037 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.566 |  0.102 |  0.999 |  0.295 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.562 |  0.161 |  0.984 |  0.238 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.512 |  0.109 |  0.964 |  0.239 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.528 |  0.103 |  0.968 |  0.258 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.514 |  0.127 |  1.000 |  0.272 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.036 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.524 |  0.100 |  0.967 |  0.242 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.546 |  0.105 |  0.987 |  0.269 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.041 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.549 |  0.112 |  0.997 |  0.241 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.555 |  0.104 |  0.975 |  0.261 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.574 |  0.109 |  0.992 |  0.269 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.546 |  0.105 |  0.979 |  0.255 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.580 |  0.104 |  0.992 |  0.270 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.548 |  0.101 |  0.994 |  0.271 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.495 |  0.107 |  0.998 |  0.278 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.001 | -0.029 |  0.026 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:47:25.594 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:47:25.594 : Random seed: 8344
23-09-02 10:47:25.611 : Number of train images: 8,000, iters: 250
23-09-02 10:47:26.058 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:47:26.067 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.000 | -0.073 |  0.070 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.602 |  0.109 |  0.999 |  0.253 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.565 |  0.110 |  0.992 |  0.266 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.031 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.560 |  0.145 |  0.996 |  0.244 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.580 |  0.106 |  0.999 |  0.263 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.539 |  0.105 |  0.996 |  0.269 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.608 |  0.148 |  0.997 |  0.278 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.035 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.534 |  0.104 |  0.990 |  0.277 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.585 |  0.157 |  0.988 |  0.265 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.554 |  0.114 |  0.966 |  0.250 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.552 |  0.108 |  0.952 |  0.238 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.031 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.539 |  0.102 |  0.992 |  0.256 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.561 |  0.103 |  0.960 |  0.267 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 | -0.000 | -0.035 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.530 |  0.133 |  0.999 |  0.248 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.595 |  0.101 |  0.982 |  0.278 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.553 |  0.154 |  0.992 |  0.248 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 |  0.000 | -0.029 |  0.028 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:47:30.789 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.897e-03 
23-09-02 10:48:58.003 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:48:58.003 : Random seed: 9897
23-09-02 10:48:58.020 : Number of train images: 8,000, iters: 250
23-09-02 10:48:58.461 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:48:58.469 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.065 |  0.088 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.036 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.516 |  0.118 |  0.983 |  0.248 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.030 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.592 |  0.105 |  0.997 |  0.231 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.557 |  0.101 |  0.993 |  0.273 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.568 |  0.100 |  0.970 |  0.258 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.037 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.561 |  0.110 |  0.985 |  0.278 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.035 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.523 |  0.102 |  0.966 |  0.258 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.034 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.500 |  0.113 |  0.949 |  0.247 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.034 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.609 |  0.106 |  0.981 |  0.246 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.034 |  0.042 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.500 |  0.108 |  0.970 |  0.271 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.035 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.516 |  0.114 |  0.998 |  0.249 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.563 |  0.143 |  0.999 |  0.255 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.514 |  0.101 |  0.975 |  0.244 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.544 |  0.144 |  0.996 |  0.239 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.601 |  0.107 |  1.000 |  0.265 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 |  0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.541 |  0.104 |  0.957 |  0.248 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.028 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:49:03.175 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.733e-03 
23-09-02 10:49:07.430 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 7.183e-03 
23-09-02 10:51:12.108 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:51:12.108 : Random seed: 4476
23-09-02 10:51:12.124 : Number of train images: 8,000, iters: 250
23-09-02 10:51:12.581 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:51:12.588 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.000 | -0.085 |  0.084 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.591 |  0.115 |  0.999 |  0.267 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 | -0.000 | -0.037 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.540 |  0.103 |  0.991 |  0.274 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.037 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.560 |  0.109 |  0.999 |  0.251 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 |  0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.524 |  0.103 |  0.964 |  0.250 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 | -0.000 | -0.035 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.582 |  0.113 |  0.971 |  0.251 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 | -0.000 | -0.040 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.568 |  0.121 |  0.959 |  0.227 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 | -0.000 | -0.033 |  0.030 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.562 |  0.111 |  0.988 |  0.274 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.033 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.607 |  0.120 |  0.998 |  0.245 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.035 |  0.039 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.641 |  0.136 |  0.987 |  0.222 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.550 |  0.103 |  0.999 |  0.290 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.038 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.497 |  0.112 |  0.983 |  0.266 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 | -0.000 | -0.035 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.525 |  0.104 |  0.985 |  0.275 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.591 |  0.114 |  0.996 |  0.270 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 | -0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.577 |  0.105 |  0.999 |  0.279 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.032 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.589 |  0.148 |  0.992 |  0.262 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.028 |  0.022 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:51:17.491 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.960e-03 
23-09-02 10:52:12.483 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:52:12.483 : Random seed: 7036
23-09-02 10:52:12.499 : Number of train images: 8,000, iters: 250
23-09-02 10:52:12.978 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:52:12.986 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.000 | -0.079 |  0.076 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.032 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.613 |  0.218 |  0.995 |  0.222 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.031 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.522 |  0.102 |  0.995 |  0.264 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.586 |  0.104 |  0.983 |  0.272 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.032 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.569 |  0.125 |  0.997 |  0.266 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.587 |  0.101 |  0.993 |  0.277 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.575 |  0.142 |  0.966 |  0.249 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.588 |  0.101 |  0.978 |  0.254 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.555 |  0.137 |  0.998 |  0.242 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 |  0.000 | -0.034 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.574 |  0.117 |  0.997 |  0.266 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.035 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.536 |  0.103 |  0.983 |  0.261 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.532 |  0.112 |  0.997 |  0.273 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.494 |  0.102 |  0.997 |  0.270 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.035 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.559 |  0.117 |  1.000 |  0.253 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.566 |  0.106 |  0.995 |  0.283 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.036 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.535 |  0.105 |  0.996 |  0.252 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.028 |  0.028 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:52:17.835 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 9.077e-03 
23-09-02 10:52:22.340 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 6.468e-03 
23-09-02 10:53:55.095 :   task: dncnn3_trial
  model: plain
  gpu_ids: [0]
  scale: 1
  n_channels: 1
  merge_bn: True
  merge_bn_startpoint: 400000
  path:[
    root: denoising
    pretrained_netG: None
    task: denoising/dncnn3_trial
    log: denoising/dncnn3_trial
    options: denoising/dncnn3_trial/options
    models: denoising/dncnn3_trial/models
    images: denoising/dncnn3_trial/images
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: dncnn
      dataroot_H: trainsets/train_sigma6
      dataroot_L: None
      H_size: 40
      sigma: 6
      sigma_test: 6
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 1
      n_channels: 1
    ]
    test:[
      name: test_dataset
      dataset_type: dncnn
      dataroot_H: testsets/eval_sigma6
      dataroot_L: None
      sigma: 6
      sigma_test: 6
      phase: test
      scale: 1
      n_channels: 1
    ]
  ]
  netG:[
    net_type: dncnn
    in_nc: 1
    out_nc: 1
    nc: 64
    nb: 17
    gc: 32
    ng: 2
    reduction: 16
    act_mode: BR
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
    G_optimizer_betas: [0.9, 0.999]
    G_scheduler_restart_weights: 1
    G_optimizer_wd: 0
    G_optimizer_reuse: False
    G_param_strict: True
    E_param_strict: True
    E_decay: 0
  ]
  opt_path: options/train_dncnn.json
  is_train: True
  find_unused_parameters: True
  use_static_graph: False
  dist: False
  num_gpu: 1

23-09-02 10:53:55.095 : Random seed: 8060
23-09-02 10:53:55.112 : Number of train images: 8,000, iters: 250
23-09-02 10:53:55.593 : 
Networks name: DnCNN
Params number: 557057
Net structure:
DnCNN(
  (model): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (4): ReLU(inplace=True)
    (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (28): ReLU(inplace=True)
    (29): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (30): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (31): ReLU(inplace=True)
    (32): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (34): ReLU(inplace=True)
    (35): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (36): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (37): ReLU(inplace=True)
    (38): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (39): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (40): ReLU(inplace=True)
    (41): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (42): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (43): ReLU(inplace=True)
    (44): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (45): BatchNorm2d(64, eps=0.0001, momentum=0.9, affine=True, track_running_stats=True)
    (46): ReLU(inplace=True)
    (47): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

23-09-02 10:53:55.601 : 
 |  mean  |  min   |  max   |  std   || shape               
 |  0.002 | -0.082 |  0.069 |  0.025 | torch.Size([64, 1, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.2.bias
 |  0.521 |  0.117 |  0.997 |  0.254 | torch.Size([64]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.3.running_var
 |  0.000 | -0.032 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.5.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.5.bias
 |  0.575 |  0.108 |  1.000 |  0.278 | torch.Size([64]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.6.running_var
 | -0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 |  0.567 |  0.112 |  1.000 |  0.273 | torch.Size([64]) || model.9.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.9.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.9.running_var
 | -0.000 | -0.033 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.11.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.11.bias
 |  0.495 |  0.102 |  0.987 |  0.263 | torch.Size([64]) || model.12.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.12.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.12.running_var
 |  0.000 | -0.040 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.14.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.14.bias
 |  0.541 |  0.107 |  1.000 |  0.266 | torch.Size([64]) || model.15.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.15.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.15.running_var
 |  0.000 | -0.034 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.17.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.17.bias
 |  0.556 |  0.116 |  0.992 |  0.253 | torch.Size([64]) || model.18.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.18.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.18.running_var
 | -0.000 | -0.038 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.20.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.20.bias
 |  0.516 |  0.133 |  0.968 |  0.269 | torch.Size([64]) || model.21.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.21.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.21.running_var
 | -0.000 | -0.033 |  0.041 |  0.008 | torch.Size([64, 64, 3, 3]) || model.23.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.23.bias
 |  0.582 |  0.112 |  0.995 |  0.279 | torch.Size([64]) || model.24.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.24.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.24.running_var
 | -0.000 | -0.036 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.26.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.26.bias
 |  0.629 |  0.138 |  0.999 |  0.245 | torch.Size([64]) || model.27.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.27.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.27.running_var
 |  0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.29.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.29.bias
 |  0.543 |  0.132 |  0.999 |  0.256 | torch.Size([64]) || model.30.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.30.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.30.running_var
 |  0.000 | -0.033 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.32.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.32.bias
 |  0.485 |  0.108 |  0.987 |  0.254 | torch.Size([64]) || model.33.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.33.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.33.running_var
 |  0.000 | -0.032 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.35.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.35.bias
 |  0.558 |  0.107 |  0.996 |  0.252 | torch.Size([64]) || model.36.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.36.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.36.running_var
 |  0.000 | -0.037 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.38.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.38.bias
 |  0.534 |  0.101 |  0.992 |  0.254 | torch.Size([64]) || model.39.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.39.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.39.running_var
 |  0.000 | -0.040 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.41.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.41.bias
 |  0.526 |  0.108 |  0.996 |  0.267 | torch.Size([64]) || model.42.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.42.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.42.running_var
 | -0.000 | -0.037 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.44.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.44.bias
 |  0.516 |  0.117 |  0.992 |  0.274 | torch.Size([64]) || model.45.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.bias
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.45.running_mean
 |  1.000 |  1.000 |  1.000 |  0.000 | torch.Size([64]) || model.45.running_var
 | -0.000 | -0.027 |  0.025 |  0.008 | torch.Size([1, 64, 3, 3]) || model.47.weight
 |  0.000 |  0.000 |  0.000 |    nan | torch.Size([1]) || model.47.bias

23-09-02 10:54:00.456 : <epoch:  0, iter:     200, lr:1.000e-04> G_loss: 8.101e-03 
23-09-02 10:54:04.970 : <epoch:  1, iter:     400, lr:1.000e-04> G_loss: 7.132e-03 
